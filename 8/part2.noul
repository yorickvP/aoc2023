import "prelude.noul";

[instructions, maps] := read() . lines . uncons;
maps filter= len;

mapping := for ([k, v] <- maps map (split " = "))
  yield k: v[1:-1] split ", ";

walk := \pos, instr -> (
  switch(instr)
  case "L" -> mapping[pos][0]
  case "R" -> mapping[pos][1]
);

cycle_count := \position -> (
  steps := 0;
  seen_before := {};
  while (true) (
    seen_before[position] = steps;
    position = instructions fold walk from position;
    steps += len instructions;
    if (position in seen_before) return steps - seen_before[position];
  );
  steps
);

positions := mapping.keys filter (ends_with "A") map cycle_count;

lcm := \x -> product(x) / ((x fold gcd) ^ len(x));

print(lcm(positions) * (positions fold gcd));
