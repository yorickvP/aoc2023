import "prelude.noul";
import "heap.noul";

puzzle_input := read() . lines filter len map (map int);

height := len(puzzle_input);
width := len(puzzle_input[0]);
isInBounds := \[i, j] -> i >= 0 and j >= 0 and i < height and j < width;

ix := \a, x -> a[x[0]][x[1]];

connFour := [V(1, 0), V(0, 1), V(0, -1), V(-1, 0)];
opposite := \x -> 3 - x;
# dir := "DRLU";

secondNeighbours := \budget, pos, dir -> (
  r := [];
  for (i, delta <<- connFour) (
    if (i == dir.opposite) continue;
    if (budget == 0 and i == dir) continue;
    d := pos + delta;
    if (not(d.isInBounds)) continue;
    c := puzzle_input ix d;
    if (i == dir) (
      r append= [[budget - 1, d, i], c];
    ) else (
      if ((d + 3 * delta).isInBounds.not) continue;
      d += delta; c += puzzle_input ix d;
      d += delta; c += puzzle_input ix d;
      d += delta; c += puzzle_input ix d;
      r append= [[6, d, i], c];
    )
  );
  r
);

dijkstra := \vertices, neighbours, isStart, sources -> (
  dist := {};
  q := [];
  visited := {};
  for (v <- vertices) (
    dist[v] = 1/0;
    if (v.isStart) dist[v] = 0;
  );
  for (source <- sources)
    q heappush= [0, source];
  i := 0;
  u := null;
  while (q != []) (
    [q, [_, u]] = heappop(consume q);
    visited[u] = null;
    for ([v, cost] <- neighbours(u[0], u[1], u[2])) (
      if (v in visited) continue;
      if (dist[u] + cost < dist[v]) (
        dist[v] = dist[u] + cost;
        q heappush= [dist[v], v];
      );
    );
    i += 1;
    if (i % 1000 == 0) (
      print("progress:", i, "/", vertices.len, "q:", q.len);
    )
  );
  s := [];
  u = V(height - 1, width - 1);
  dists := dist.items filter ((== u) on second on first);
  dists min (<=> on second)
);

firstIsStart := \[b, d, v] -> d == V(0, 0);
vertices := for (i <- 0 til height; j <- 0 til width; b <- 0 til 7; d <- 0 til 4) yield [b, V(i, j), d];

print(dijkstra(vertices, secondNeighbours, firstIsStart, [[0, V(0, 0), 0], [0, V(0, 0), 1]]));
